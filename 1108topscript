ArrowController *
ArrowShoot*
FollowingCamera * 
ItemKeeper
PlayerController

------
-------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ArrowController : MonoBehaviour
{
    public float deleteTime = 2.0f; //???????? ????

    // Start is called before the first frame update
    void Start()
    {
         Destroy(gameObject, deleteTime); //2?? ???? ???????? ????
    }


    private void OnCollisionEnter2D(Collision2D collision)
    {
        transform.SetParent(collision.transform);

        //?????? ???????? ???? ????????
        GetComponent<CircleCollider2D>().enabled = false;

    }

}


-----
-----
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FollowingCamera : MonoBehaviour
{
    // Update is called once per frame
    void FixedUpdate()
    {
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        
        if(player != null )
        {
            transform.position = new Vector3(player.transform.position.x,
                player.transform.position.y, -10);
        }
      

    }
}
-----------------------
---------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ArrowShoot : MonoBehaviour
{
    public float shootSpeed = 12.0f;
    public float shootDelay = 0.25f;
    public GameObject bowPrefab;
    public GameObject arrowPrefab;

    bool inAttack = false;
    GameObject bowObject;

    // Start is called before the first frame update
    void Start()
    {
        Vector3 pos = transform.position;
        bowObject = Instantiate(bowPrefab, pos, Quaternion.identity);
        bowObject.transform.SetParent(transform);
    }
    // Update is called once per frame
    void Update()
    {
        //Input Manager???? ???? shift ???? ???? ?? ???????? ????
        if((Input.GetButtonDown("Fire3")))
        {
            Attack();
        }
       
        float bowZ = -1; 
        PlayerController playerController = GetComponent<PlayerController>();

        if (playerController.angleZ > 30 && playerController.angleZ < 150)
            bowZ = 1; //???? Z ??(?????????? ???? ??????????.)
        bowObject.transform.rotation = Quaternion.Euler(0, 0, playerController.angleZ);
        
        bowObject.transform.position = new Vector3(transform.position.x, transform.position.y,bowZ);
    }

    public void Attack()
    {
        //?????? ?????? ???? ???? ???? ???? ???????? ?????? ????
        if(ItemKeeper.hasArrows > 0 && inAttack == false)
        {
            ItemKeeper.hasArrows--; //?????? 1?? ????
            inAttack = true; //???? ?????? ????

            //???? ????
            PlayerController playerController = GetComponent<PlayerController>();
            float angleZ = playerController.angleZ; //???? ???? ????????
            Quaternion quaternion = Quaternion.Euler(0, 0, angleZ);
            GameObject arrowObject = Instantiate(arrowPrefab, transform.position, quaternion);

            //?????? ?????? ???? ????
            float x = Mathf.Cos(angleZ * Mathf.Deg2Rad);
            float y = Mathf.Sin(angleZ * Mathf.Deg2Rad);

            Vector3 vector = new Vector3(x, y) * shootSpeed;

            Rigidbody2D rbody = arrowObject.GetComponent<Rigidbody2D>();
            rbody.AddForce(vector, ForceMode2D.Impulse);
            //?????????? ???? ?? StopAttack?? ???? ???? ?????????? ????
            Invoke("StopAttack", shootDelay);
        }

    }

    public void StopAttack()
    {
        inAttack = false;
    }
}
-------------
-------------

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ItemKeeper : MonoBehaviour
{
    public static int hasKeys = 0;    
    public static int hasArrows = 10; 

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
----------------
---------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


[RequireComponent(typeof(Rigidbody2D))]
public class PlayerController : MonoBehaviour
{
    #region public fields
    [Header("Player Info")]
    [Range(3,5)]public float speed = 3.0f; 
    public float angleZ = -90.0f; 
    [Header("Animations")]
    public string up = "PlayerUp";
    public string down = "PlayerDown";
    public string left = "PlayerLeft";
    public string right = "PlayerRight";
    public string dead = "PlayerDead";
    public string current_animation = "";
    public string previous_animation = "";
    #endregion

    #region private fields
    float axisH, axisV; 
    Rigidbody2D rbody; // Rigidbody 2D
    bool isMoving = false; 
    #endregion

    // Start is called before the first frame update
    void Start()
    {
        rbody = GetComponent<Rigidbody2D>();
        previous_animation = down;
    }

    // Update is called once per frame
    void Update()
    {
        if(isMoving == false)
        {
            axisH = Input.GetAxisRaw("Horizontal");
            axisV = Input.GetAxisRaw("Vertical");
        }

        
        Vector2 fromPt = transform.position;
        Vector2 toPt = new Vector2(fromPt.x + axisH, fromPt.y + axisV);
        angleZ = GetAngle(fromPt, toPt);

       
        if (angleZ >= -45 && angleZ < 45)
            current_animation = right;
        else if (angleZ >= 45 && angleZ <= 135)
            current_animation = up;
        else if (angleZ >= -135 && angleZ <= -45)
            current_animation = down;
        else
            current_animation = left;

        
        if(current_animation != previous_animation)
        {
            previous_animation = current_animation;
            GetComponent<Animator>().Play(current_animation);
        }
    }

    private void FixedUpdate()
    {
        rbody.velocity = new Vector2(axisH, axisV) * speed;
    }



    
    private float GetAngle(Vector2 fromPt, Vector2 toPt)
    {
        float angle; 
        
        if(axisH != 0 || axisV != 0)
        {
           
            float dx = toPt.x - fromPt.x;
            float dy = toPt.y - fromPt.y;

            float radian = Mathf.Atan2(dy,dx);
           
            angle = radian * Mathf.Rad2Deg;
        }
        else
        {
            angle = angleZ;
        }
        return angle;
    }
}

























