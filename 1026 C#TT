using System;
using System.Collections.Generic;

namespace list_tutorial
{
class Program
{
   static void Main(string[] args)
   {
     var names = new List <string>

     //List <type > {"<name>" , "Scott","Kendra"  };

     names.Add("Maria");
     names.Add("Bill");
     names.Remove("Scott");

     foreach (var name in names)
     {
//foreach ( var in ) 구조 -- 
     Console.WriteLine(name);
     }  
  var index = names.IndexOf("bill");
  Console.WriteLine($"Found Bill at {index}");
   }
}
}
-----------------------------------------------
변수 변수명
int
float
string
bool
변수에 값을 넣는 것을 초기화 라고 한다.

선언 > 초기화 > 호출 (사용)

그룹형 변수 
string [] 변수명 대괄호를 타입 뒤에 열고닫고 = 중괄호를 {   "" , "" , } 중괄호 안에 데이터 값을 넣습니다!
배열의 가장 기본적인 선언

변수명[0] 0부터 시작이라는 사실.

int [] hannong = new int[3];
hannong[0] = 1;
hannong[1] = 20;
hannong[2] = 30;

List 기능이 추가된 가변형 그룹형 변수
List <타입> 한홍 = new List <타입>();
List 는 꺾새. 

한홍.Add("타입에 맞는 데이터를 써넣는다.");

List는 꺽새와, Add.

한홍.RemoveAt(0);

연산자
int exp = 100;
///////////// 윗대가리

% 나머지

-- 변수 선언해줄때 bool isFulllevel = false;

int fulllever = 99;
isFulllevel = level == fulllevel;
같음을 의미할 때는 ==
값을 입력해 줄 때는 =


bool isEndTutorial = level > 10;

int health = 30;
int mana = 25;
bool isBadCondition = health <= 50이하  50 && mana <= 20; 20이하

&& 그리고

두 값이 모두 트루 일 때만, 트루를 출력

50이하 이고, 20이하이면, => true

Debug.Log("용사의 상태가 나쁩니까?" + isBadCondition);

|| OR
또는 , 의 의미.

둘 중 하나만 트루면, 트루 출력  

string condition = isBadCondition ? "나쁨" : "좋음";
디버그.로그 (용사의 상태가 나쁩니까? + condition);

int float .. 등등 이런 값들을 키워드 라고 하는데, 
얘네는 변수명이나, 데이터로 사용불가능 하다.
-----------------
조건문
if () {} - 조건이 트루일때, 로직이 실행된다

if (condition == "나쁨")
{
 디벅.로그("----");


} 
else {             }
 
---------------------

if(isBadCondition && items [0] == "생명물약30")
{
items.RemoveAt(0);
health += 30;
Debug.Log("생명포션 30을 사용하였습니다.");

}
switch, case : 변수의 값에 따라 로직 실행

switch(변수){


case 값 1 :
break;

default:
break;
선언해준 변수 들 , 중 하나씩 케이스에 넣어서 불러내주고 결과 보내주다가,
그 케이에 못 들어가고 남은 애들 싹다. 불러낼 때 !!!!!!!!!  default; !!!!!!!!!!


케이스만 따로 데서, 붙여서 묶어주고 그 다음 로직을 쓰게되면,
묶어준 케이스들 같은 로직이 발생될 수 있다.


반복문 조건에 만족하면 로직을 반복하는 제어문
while ( 조건 )
{
 로직

}
트루일때 로직 반복

for ( 변수 ; 조건 ; 연산 )
{
로직

}
첫번째 만들어진 변수를 가지고, 세번째 방식으로 연산하고 
두전째 조건으로 돌린다.

for ( int count = 0; count < 10 ; count++)
{
count 가 ++ 증가를 할 건데, 딱 10번만 돌리겠습니다.



for ( int index = 0; index < monsters.Length; index++)
{

Debug.Log("이 지역에 있는 몬스터 :" + monsters[index]);
}


그룹형 변수 길이 : .Length - [  배열 ]
               .Count - [ 리스트 ]





for 문, foreach ( string monster in monsters )
{

 -----------------;
}

함수 - 메소드

기능을 편리하게 사용하도록 구성된 영역
start ()
{
함수
}



health = Heal(health);
         매개변수


int Heal (int health) - 따로 이렇게 해주는게 귀찮다 싶으면
아예 바깥에, 전역변수에 타입 변수 ; 이렇게 선언을 해주고
Heal(); 이렇게 함수 해주고
{
함수 앞에 놓인 타입을 적었다면
heal = 10; 
Debug.Log("힘을 받았습니다." + health);
return health; // void Heal()
                  {
  
                   }
               보이드로 시작했으니, return 은 빼주자!

 }

배열에는 포문을 돌리자!

클래스. 
하나의 사물 오브젝트와 대응하는 로직
class파일명
-----------------------------Actor 파일에 만들었죠 
public class Actor
{
int id;
string title;
string weapon;
float strength;
int level;


string Talk()
{
return "대화를 걸었습니다.";
}

string HasWeapon()
{

return weapon;

}

}

-----------이렇게 멤버 변수 멤버 함수를 모두 만든 다음

다른 스크립트로 와서

스타트 함수 안에 저 클래스를 사용해보도록 하겠씸더

변수를 쓸 떄 타입을 쓰는 것처럼 
타입 대신 클래스명을 써준 뒤 변수명 = new 클래스 ();

이 클래스 자체를 하나의 변수로 만들어 주는 걸 인스턴스화 라고 말합니다.
인스턴스 : 정의된 클래스를 변수 초기화로 실체화!

이때, 이것이 가능한 또 하나의 이유는
클래스를 만들때 앞에 public 이 있기 때문이구요,

그 클래스 안에 있는 변수들도 public 을 써줘야
다른 클래스에서 불러올 수 있습니다.














































































































