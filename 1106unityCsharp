Ui 상에서 데이터베이스의 유닛 수만큼 유닛 생성 버튼을 만들어내고 버튼을 누르면 유닛이 생성되도록 코드를 작성합니다
유닛 생성 시 그만큼 코스트가 감소합니다
유닛의 생성 쿨타임은 5초로 설정합니다 여기서 말하는 쿨타임은 (버튼의 Fill Type 중에서 Fill amount 가 1에서 0으로 줄어들었다가, 다시 1로 돌아오는 시간이 5초 걸린다는 뜻이야

Button 이라는 데이터의 프리펩을 생성해주고 
Unit 을 생성해 놓는 스크립트를 따로 생성해줍니다.

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class UnitGeneratorSystem : MonoBehaviour
{
    [SerializeField] private Transform panel;  - 버튼이 놓일 위치, 생성위치를 패널로 설정했구요 패널에 Horizontal Layer 컴포넌트를 넣어줬습니다


    [SerializeField]private Button buttonPrefab; - 
    
    [SerializeField] UnitDatabase unitDatabase; - 
    
    [SerializeField] private GameObject UnitPrefab; - 
    
    
    void Start()
    {
         
        
        foreach(var unit in unitDatabase.unit_datas)
        {
            Button button = Instantiate(buttonPrefab,panel.position, Quaternion.identity, GameObject.Find("Canvas").transform);
            
            button.name = unit.name + "Button";
            
            button.transform.SetParent(panel,false); 버튼의 부모를 패널로 설정해 주는 것이다.
            
            button.onClick.AddListener(delegate{ CreateUnit(unit.name, unit.cost);}); ** delegate 코드를 사용 !!!! 
          
        }  
    }

    public void CreateUnit(string unit_name, int unit_cost) 유닛의 이름이라는 정보를 받아서 유닛의 이름을 받아서 생성하도록 작성해주는 것이다.
    {
        GameObject go = Instantiate(UnitPrefab);
        go.name = unit_name;
        UnitSystem.cost -= cost;
        //코스트 지불 코드를 추가해줍니다
        유닛의 유형에 따라서 유닛의 이미 형체같은 것도 결정해주고 조합을 해서 유닛을 생성하도록 추가해줄 수 있다. 
    }


    // Update is called once per frame
    void Update()
    {
        
    }
}

이 스크립트를 unit system 에 넣어두고 패널과 버튼 프리펩 데이터 페이스. 에셋폴더에 있는 캡슐 오브젝트를 유닛 프리펩에 넣어줍니다.
버튼의 위치를 옮겨주고

만약에 유닛생성할 때 코스트를 지불하고 싶으면 

//// unit sYstem ////  에 public int cost ; 로 바꿔주고

시스템 중에서 public static void CostText()
{


Cost_Text.GetComposnt<TMP_Text>().text = "Cost : {cost};
}


그 다음 단계 혼자서 생각해보고 정리하기
----------------------------------


https://docs.unity3d.com/kr/2019.4/Manual/ExecutionOrder.html

---------------------------------


 **  -   Delegate


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DelegateExample : MonoBehaviour
{
    //delegate (델리게이트 ) : 대표자
    //값을 저장하는 참조 타입의 일종입니다
    //델리게이트는 메소드에 대한 참조를 진행합니.
    // 그리고 그 대표자를 통해 메소드를 전달할 수 있습니다.

    //1. 대표자 대리자 선언을 해줍니다.
  // 사용자가 표현할 메소드의 형태와 동일하게 설계합니다
    public delegate void ExampleDelegator(int value);

    //해당 delegate 가 참조하는 메소드의 형태로 알맞은 것?
    //1. int 형 매개변수를 가지는 void 타입의 함수
    //2. int 형 매개변수를 가지는 ExampleDelegator 형태의 함수
    //3. void 타입의 함수

    //정답은 1번 참조하고 있는 건 void 형태의 함수이다.






    ExampleDelegator exampleDelegator; //변수를 만들어줌

    int score;
    int hp;

    public void SetScore(int value)
    {
        score += value;
        Debug.Log("{value}만큼 점수를 획득");
    }

    public void SetHP(int value)
    {
        hp += value;
        Debug.Log("플레이어의 체력{hp}만큼 증가합니다.");
    }


    // Start is called before the first frame update
    void Start()
    {
        exampleDelegator = new ExampleDelegator(SetScore);
        exampleDelegator(10);
        exampleDelegator = new ExampleDelegator(SetHP);
        exampleDelegator(20);

        //delegate 사용법 : 여러 함수를 참조해 객체를 한번 실행하는 것으로
        //등록해놓은 모든 함수를 같이 실행할 수 있습니다

        exampleDelegator += SetScore;
        exampleDelegator += SetHP;
        exampleDelegator(10);


    }

    // Update is called once per frame
    void Update()
    {
        
    }
}


------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DelegateExample2 : MonoBehaviour
{
    delegate int TesterDelegate(int x, int y);

    private void Start()
    {
        //1. Annoymous Method( 익명 메소드 )
        무명 메소드라고도 부르며, delegate 구현 시
      따로 메소드를 설계하지 않고 바로 데이터 형태로 구현하는 방식으로 구현합니다.
delegate과 형태가 당연히 동일해야 함.
      

        TesterDelegate testerDelegate = delegate (int x, int y)
        {
            return x + y;
        };

        Debug,Log(testerDelegate(1,2));
    }
}
---------------
delegate Chain : 여러 개의 함수를 한번에 처리
                 callback 개념 구현 : 어떤 일을 수행하는 코드이며, 프로그램 실행 중에
                결정되는 명령이며, 원래 코드가 아닌 다른 코드에게 대신 처리하는 형태

                delegate 는 이 콜백을 맡아 일을 실행하는 역할로 사용됩니다.

                이벤트 : 객체에서 일어난 일 또는 사건을 표현하는 형식이다.
                여기서 이벤트 발생 시 실행되는 메소드를 작업하기 위해 이벤트 핸들러 라는 개념을 사용,
                이벤트 + 델리게이트. 


               -------------


             using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class AddReward : MonoBehaviour
{
   public float WatchCoolTime = 60.0f;
    public Slider Bar;

    [SerializeField] float watch_time;
    [Range(50,150)][SerializeField] int reward = 100;

    //슬라이더 바는 60초동안 게이지가 추가되도록 작업합니다.

    public delegate void AdsRewardDelegate();

    //보상을 주는 기능
    //메인 메뉴에 보상 수치를 출력하는 기능
    //광고버튼 활성화 기능
    //광고 보는 기능 ( 광고를 보면 게이지 바 증가 )
    // 광고 쿨타임 / 게이지 바 업데이트 쿨타임이 0 이하일 경우 작업 종료



    

}
  ------------------------
public class AddReward : MonoBehaviour
{
    // ... (기존 변수들은 여기에 있음)

    private bool isCoolingDown = false; // 광고 쿨타임 여부를 나타내는 변수

    // 광고를 보고 보상을 받는 메서드
    public void WatchAd()
    {
        if (!isCoolingDown)
        {
            // 광고를 보는 동작을 여기에 추가
            // 광고를 본 후 보상을 주는 동작을 수행 (예: reward를 플레이어에게 추가)

            // 게이지 바 업데이트
            Bar.value += (watch_time / WatchCoolTime);

            // 광고 쿨타임 초기화
            StartCoroutine(CoolDown());
        }
    }

    // 광고 쿨타임을 처리하는 코루틴
    private IEnumerator CoolDown()
    {
        isCoolingDown = true;
        yield return new WaitForSeconds(WatchCoolTime);
        isCoolingDown = false;
    }
    
    // ... (기타 기능을 추가할 수 있음)
}
  



monobehaviour , scriptableObject 일반 클래스를 데이터화 해서 간단한 모듈 시스템 구현

delegate 를 통해 함수를 돌려쓰거나 합쳐 사용하는 방법에 대해 배움

-- 유니티 인터페이스 , 디자인 패턴 에 대한 학습이 이루질 예정 ( 11. 7 )






 




































































}



















