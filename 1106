delegate 

-------------

class 안에

int power;
int defence;

public void SetPower(int value)
{
power += value;
print("power + value + 만큼 증가했습니다.);
}


public void SetDefence(int value)
{
defence += value;
print("defence의 값이 + ㅇㅇㅇ);
}

void Start()
{
SetPower(5);
SetDefence(5);
}


이렇게  하나의 사건으로 여러개의 기능들이 움직이게 하고 싶을 때
일일히 값을 넣어주면 번거로울 수 있으므로


class 안에

public delegate //델레게이트이름을 써준다 ChainFumction// 이렇게 하나의 클래스를 만든 것과 같게 된다. (int value);

public static event 이벤트가 chainFunction 을 받아오기 때문에 저걸 써주고, 이 이벤트의 이름 OnStart 라고 지어서 써줌;


ChainFunction chain; //체인펑션을 온스타트가 받아줬을 때에는 이 코드가 필요치 않다. 


int power;
int defence;

public void SetPower(int value)
{
power += value;
print("power + value + 만큼 증가했습니다.);
}


public void SetDefence(int value)
{
defence += value;
print("defence의 값이 + ㅇㅇㅇ);
}

void Start()
{
chain += SetPower;
chain += SetDefence;

OnStart += SetPower;
Onstart += SetDefence;

온스타트에 저 두 함수값을 넣어준 것,

chain(5);
이렇게 chain 에 값을 넣으면 동시에 저 두 함수가 값을 받게 되는 것이다. 
}

게임이 끝난 뒤 OnStart를 호출
private void OnDisable()
{
// 원래 유니티에 있던 함수인데, 게임이 꺼지거나 객체가 비활성화 될 때 호출되는 함수이다.
이곳에 온스타트 (이벤트 함수) 를 호출시켜줍니다.
OnStart(5);



}


-- 테스트2 스크립트를 빛에다가 넣어주고
테스트 스크립트를 카메라에 넣어주면 게임 시작과 동시에 모두 호출되어 실행됩니다. 







// OnStart 생성 후


새로운 스크립트를 만들어 줍니다.

public class Test2 : MonoBehaviour
{

void Start()
{
Test 스크립트 안에 있는 . OnStart 함수를 연결시켜준다는 의미. += Abc;


}





함수를 하나 만들어 줍니다.
public void Abc(int value)
{
print("value + 값이  증가했다");




}






}

---------------------------------------------------------------






































