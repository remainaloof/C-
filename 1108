3D Camera render 강의 듣기
unity 3D 로 로그인 접속 화면 만들기
unity inerface 에 대한 문법
11월 11일 1시 ~ 5시 강의 듣기






우선 플레이어를 따라 움직이는 카메라를 설정하기 위해 메인 카메라에 넣을 스크립트 !

public MoveCamera : MonoBehaviour


public Transform targer;

void Start()
{

}

void LateUpdate()
{
transform.position = new Vector3(target.position.x, target.position.y,-10f);

}

---------------------- 스크립트의 target 에 추적할 대상을 끌어서 넣어줍니다. --------


너무 밋밋하다 싶을떄, 부드럽게 움직이는 코드를 추가해줍니다.


-------------------------------------------
public MoveCamera : MonoBehaviour


public Transform targer;

void Start()
{

}

void LateUpdate()
{
transform.position = new Vector3.Lerp (target.position, target.position, Time.deltaTime);

}





////////// Vector.Lerp 를 이용해서 카메라의 position 값을 변경하겠습니다.
Vector.Lerp는 (Vector3 A, Vector3 B, float t)
A와 B가 고정이라면 반환된 벡터는 t값에 따라 변합니다.
( 
t 값은 0.0 ~ 1.0 )

A(0,0,0) B(10,0,0)
t 가 0 이면 ( 000 )
t 가 0.2 면  ( 200 )
t 가 0.5 면  ( 10 0 0 ) 을
반환하게 됩니다.

Time.deltaTime = 전 프레임이 완료된 시간
1초에 10프레임이라면 프레임에 걸린 시간 약 0.1초

이렇게 해주면 카메라의 위치는 매 프레임 조금씩 플레이어에 다가가게 됩니다.

이때 Time.deltaTime 의 값에 speed 라는 변수를 선언해서 곱해줍니다.
speed 의 값에 따라서 카메라의 이동속도가 결정됩니다. 

target 을 만들어준 변수 밑에
public float speed; 
로 변수를 선언해준 뒤

 //////   Time.deltaTime * speed //////

이대로 실행해보면 화면에 문제가 생기는데, 그 이유는
카메라의 값이 변경 되면서    z           값이 같이 바뀌면서 발생하는 현상입니다.

그리하여

transform.position = new VEctor3(transform.position.x, transform.position.y, -10f);
를 추가해줘서 Z 값은 -10 으로 고정해줍니다.                                   

마지막으로 카메라가 일정 영역 안에서만 움직이게 제한해주겠습니다.

재헌된 영역은 vector2 값으로 중심점과 크기를 변수로 설정하겠습니다.

target 과 speed 가 있던 변수 선언 자리에
public vector2 center;
public Vector2 size;
를 선언해주고

변수 값을 시작적으로 보고싶을 떈 Gizmo 를 이용합니다.

private void OnDrawGizmos() 함수를 만들어 줍니다.
{
Gizmo.color = Color.red; => Gizmo 의 색깔을 붉은색으로 해준 것
Gizmos.DraWireCube(center.size);

}


center 와 size 의 값을 제한할 영역만큼 설정합니다.

재한 범위의 가로길이 정반을 카메라의 가로길이(절반) 로 뺀 값을 카메라의 position.x 에 넣으면 되는데 이때 최솟값은 * -1 , 최댓값은 *1을 해줍니다.
그리고 제한 범위의 center 값을 더해주면 됩니다.

먼저 카메라의 월드공간에서 가로와 세로의 크기를 구해야 합니다.
세로의 절반 크기는 Camera.orthographicSize 로 얻을 수 있습니다.

void Start () 함수에
float 형 변수 height 와 width 를 선언하고 세로 크기를 height 에 넣어줍니다.

변수 넣던 필드에 float height; float width; 선언해주고,

void Start()
{
height = Camera.main.orthographicSize;
width = height * Screen.width / Screen.height;



}

void LateUpdate()
{
//위의 내용을 참조하여 적힌 코드

// + Mathf.Clamp(value,min,max)
//value 값이 min 과 max 의 사이면 value 를 반환하고
//value 값이 min보다 작으면 min을, max 보다 크면 max 를 반환한다.

float lx = size.x * 0.5f - width;
float clampX = MathF.Clamp(transform.position.x,lx+center.x);
 // clampX 변수를 Clamp 의 반환 값으로 초기화 해주겠습니다.

 clampX 값을 구하는 코드를 복사해서 clampY 값을 구하는 코드도 만들어 줍니다.

float ly = size.y * 0.5f - height;
float clampY = MathF.Clamp(transform.position.y,ly+center.y);


이제 구해진 값을 카메라의 position 에 적용해 줍니다.
 transform.position = new Vector3(clampX, clampY,-10f);


}


----- 완성 ------

패키지 매니저의 cinemachine 을 이용하면 더 쉽게 적용할 수 있습니다.



----------- -------------- -------------- ----------- ---------------
S V Artist 채널에서 Unity login UI 구현하는 튜토리얼을 보고 공부합시다 !
그리고 1108 , 1109 아침에 공복 유산소 운동 GoGo !!!!!!!!! 
운동장 10바퀴 걷기 !
-------  ------ ---------------- ------------ ----------------------







































